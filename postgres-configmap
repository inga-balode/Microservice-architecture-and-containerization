Last login: Fri Mar 18 22:59:45 on ttys000

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
Ingas-MacBook-Pro:~ inga$ ssh 34.159.114.27
Enter passphrase for key '/Users/inga/.ssh/id_rsa': 
Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 5.4.0-1067-gcp x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Tue Mar 22 15:03:10 UTC 2022

  System load:  0.28              Processes:              202
  Usage of /:   63.0% of 9.52GB   Users logged in:        0
  Memory usage: 16%               IP address for ens4:    10.156.0.2
  Swap usage:   0%                IP address for docker0: 172.17.0.1

 * Super-optimized for small spaces - read how we shrank the memory
   footprint of MicroK8s to make it the smallest full K8s around.

   https://ubuntu.com/blog/microk8s-memory-optimisation

13 updates can be applied immediately.
1 of these updates is a standard security update.
To see these additional updates run: apt list --upgradable

New release '20.04.4 LTS' available.
Run 'do-release-upgrade' to upgrade to it.


*** System restart required ***
Last login: Tue Mar 22 13:58:14 2022 from 83.241.30.22
inga@instance-2:~$ minikube start --vm-driver=none --docker-env NO_PROXY=$NO_PROXY
😄  minikube v1.25.2 on Ubuntu 18.04 (vbox/amd64)
✨  Using the none driver based on existing profile
👍  Starting control plane node minikube in cluster minikube
🏃  Updating the running none "minikube" bare metal machine ...
ℹ️  OS release is Ubuntu 18.04.6 LTS

❌  Exiting due to GUEST_START: Failed to check container runtime version: docker version --format : exit status 1
stdout:


stderr:
Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.24/version: dial unix /var/run/docker.sock: connect: permission denied


╭───────────────────────────────────────────────────────────────────────────────────────────╮
│                                                                                           │
│    😿  If the above advice does not help, please let us know:                             │
│    👉  https://github.com/kubernetes/minikube/issues/new/choose                           │
│                                                                                           │
│    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    │
│                                                                                           │
╰───────────────────────────────────────────────────────────────────────────────────────────╯

inga@instance-2:~$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 69.2M  100 69.2M    0     0  64.5M      0  0:00:01  0:00:01 --:--:-- 64.5M
inga@instance-2:~$ chmod +x minikube
inga@instance-2:~$ sudo mv minikube /usr/local/bin
inga@instance-2:~$ sudo -i
root@instance-2:~# minikube start --vm-driver=none --docker-env NO_PROXY=$NO_PROXY
😄  minikube v1.25.2 on Ubuntu 18.04 (vbox/amd64)
✨  Using the none driver based on existing profile
👍  Starting control plane node minikube in cluster minikube
🏃  Updating the running none "minikube" bare metal machine ...
ℹ️  OS release is Ubuntu 18.04.6 LTS
🐳  Preparing Kubernetes v1.23.3 on Docker 20.10.7 ...
    ▪ env NO_PROXY=
    ▪ kubelet.resolv-conf=/run/systemd/resolve/resolv.conf
    ▪ kubelet.housekeeping-interval=5m
🤹  Configuring local host environment ...

❗  The 'none' driver is designed for experts who need to integrate with an existing VM
💡  Most users should use the newer 'docker' driver instead, which does not require root!
📘  For more information, see: https://minikube.sigs.k8s.io/docs/reference/drivers/none/

❗  kubectl and minikube configuration will be stored in /root
❗  To use kubectl or minikube commands as your own user, you may need to relocate them. For example, to overwrite your own settings, run:

    ▪ sudo mv /root/.kube /root/.minikube $HOME
    ▪ sudo chown -R $USER $HOME/.kube $HOME/.minikube

💡  This can also be done automatically by setting the env var CHANGE_MINIKUBE_NONE_USER=true
🔎  Verifying Kubernetes components...
    ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
🌟  Enabled addons: default-storageclass, storage-provisioner
🏄  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
root@instance-2:~# vi postgres-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  POSTGRES_DB: postgresdb
  POSTGRES_USER: postgresadmin
  POSTGRES_PASSWORD: admin123
~                                                                               
~                                                                               
~                                                                               
~                                                                               
~                                                                               
~                                                                               
~                                                                               
~                                                                               
~                                                                               
~                                                                               
~                                                                               
~                                                                               
~                                                                               
-- INSERT --                                                  10,30         All
